import java.util.ArrayList;
import java.util.List;

public class Carrera{
    private String fechaRealizacion;
    private int nroVueltas;
    private String horaRealizacion;
    private Pais pais; // Relación con Pais
    private Circuito circuito; //asociación carrera (0..*)-(1) Circuito
    private List<AutoPiloto> participantes;//asociación carrea (1) - (1..*)Autopiloto

    //constructor
    public Carrera(String fechaRealizacion, int nroVueltas, String horaRealizacion, Pais pais, Circuito circuito) {
        this.fechaRealizacion = fechaRealizacion;
        this.nroVueltas= nroVueltas;
        this.horaRealizacion = horaRealizacion;
        this.pais = pais;
        this.circuito = circuito;
        this.participantes = new ArrayList<>();
    }
    //Gets y Sets
    public String getfechaRealizacion() {
        return fechaRealizacion;
    }

    public int getnroVueltas() {
        return nroVueltas;
    }
    public String gethoraRealizacion() {
        return horaRealizacion;
    }
    public Pais getPais() {
        return pais;
    }
    //circuito
    public Circuito getCircuito() {
        return circuito;
    }
    public void setCircuito(Circuito circuito) {
        this.circuito = circuito;
    }
    //participantes
    public List<AutoPiloto> getParticipantes (){
        return participantes;
    }
    public void setParticipantes (List<AutoPiloto>participantes){
        this.participantes = participantes;
    }
    public void agregarParticipante (AutoPiloto ap) {
        if (ap == null) return;
        //Registra al participante en la colección interna de la carrera. Así cumplís la multiplicidad “Carrera 1 — 1..* AutoPiloto”
        this.participantes.add(ap);
        ap.setCarrera(this);
    }
    
/**
     * Clase interna para representar el resultado de un piloto en una carrera.
     */
/**    public static class ResultadoCarrera {
        private Piloto piloto;
        private int posicion;

        public ResultadoCarrera(Piloto piloto, int posicion) {
            this.piloto = piloto;
            this.posicion = posicion;
        }

        public Piloto getPiloto() {
            return piloto;
        }

        public int getPosicion() {
            return posicion;
        }
    }

    /**
     * Metodo estatico para calcular el puntaje total de un piloto a partir
     * de una lista de todos los resultados de las carreras.
     * @param piloto El piloto para el cual se calculara el puntaje.
     * @param resultados La lista completa de resultados de todas las carreras.
     * @return El puntaje total acumulado por el piloto.
    
    public static int calcularPuntajeTotal(Piloto piloto, List<ResultadoCarrera> resultados) {
        int puntajeTotal = 0;
        for (ResultadoCarrera resultado : resultados) {
            if (resultado.getPiloto().equals(piloto)) {
                puntajeTotal += Puntaje.obtenerPuntaje(resultado.getPosicion());
            }
        }
        return puntajeTotal;
    }
*//

}